"use strict";
(self["webpackChunk_substrate_parachain_demo"] = self["webpackChunk_substrate_parachain_demo"] || []).push([["vendors-node_modules_substrate_smoldot-light_src_index_js"],{

/***/ "../../node_modules/@substrate/smoldot-light/src/compat-browser.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/@substrate/smoldot-light/src/compat-browser.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "net": function() { return /* binding */ net; },
/* harmony export */   "Worker": function() { return /* binding */ Worker; },
/* harmony export */   "workerOnMessage": function() { return /* binding */ workerOnMessage; },
/* harmony export */   "workerOnError": function() { return /* binding */ workerOnError; },
/* harmony export */   "postMessage": function() { return /* binding */ postMessage; },
/* harmony export */   "setOnMessage": function() { return /* binding */ setOnMessage; }
/* harmony export */ });
// Smoldot
// Copyright (C) 2019-2021  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Overrides `compat-nodejs.js` when in a browser.

const net = null;
const Worker = typeof window != 'undefined' ? window.Worker : null;
const workerOnMessage = (worker, callback) => { worker.onmessage = (event) => callback(event.data) };
const workerOnError = (worker, callback) => { worker.onerror = callback; };  // TODO: unclear if the parameter of the callback is same as with NodeJS
const postMessage = (msg) => self.postMessage(msg);
const setOnMessage = (callback) => { self.onmessage = (event) => callback(event.data) };


/***/ }),

/***/ "../../node_modules/@substrate/smoldot-light/src/health.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@substrate/smoldot-light/src/health.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "healthChecker": function() { return /* binding */ healthChecker; }
/* harmony export */ });
// Smoldot
// Copyright (C) 2019-2021  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Creates a new health checker.
//
// The role of the health checker is to report to the user the health of a smoldot chain.
//
// In order to use it, start by creating a health checker, and call `setSendJsonRpc` to set the
// way to send a JSON-RPC request to a chain. The health checker is disabled by default. Use
// `start()` in order to start the health checks. The `start()` function must be passed a callback called
// when an update to the health of the node is available.
//
// In order to send a JSON-RPC request to the chain, you **must** use the `sendJsonRpc` function
// of the health checker. The health checker rewrites the `id` of the requests it receives.
//
// When the chain send a JSON-RPC response, it must be passed to `responsePassThrough()`. This
// function intercepts the responses destined to the requests that have been emitted by the health
// checker and returns `null`. If the response doesn't concern the health checker, the response is
// simply returned by the function.
//
// # How it works
//
// The health checker periodically calls the `system_health` JSON-RPC call in order to determine
// the health of the chain.
//
// In addition to this, as long as the health check reports that `isSyncing` is `true`, the
// health checker also maintains a subscription to new best blocks using `chain_subscribeNewHeads`.
// Whenever a new block is notified, a health check is performed immediately in order to determine
// whether `isSyncing` has changed to `false`.
//
// Thanks to this subscription, the latency of the report of the switch from `isSyncing: true` to
// `isSyncing: false` is very low.
//
function healthChecker() {
    // `null` if health checker is not started.
    let checker = null;
    let sendJsonRpc = null;

    return {
        setSendJsonRpc: (cb) => {
            sendJsonRpc = cb;
        },

        start: (healthCallback) => {
            if (checker !== null)
                throw new Error("Can't start the health checker multiple times in parallel");
            if (!sendJsonRpc)
                throw new Error("setSendJsonRpc must be called before starting the health checks");

            checker = {
                healthCallback,
                currentHealthCheckId: null,
                currentHealthTimeout: null,
                currentSubunsubRequestId: null,
                currentSubscriptionId: null,
                isSyncing: false,
                nextRequestId: 0,

                sendJsonRpc: function (request) {
                    // Replace the `id` in the request to prefix the request ID with `extern:`.
                    let parsedRequest;
                    try {
                        parsedRequest = JSON.parse(request);
                    } catch (err) {
                        return;
                    };

                    if (parsedRequest.id) {
                        const newId = 'extern:' + JSON.stringify(parsedRequest.id);
                        parsedRequest.id = newId;
                    }

                    sendJsonRpc(JSON.stringify(parsedRequest));
                },

                responsePassThrough: function (jsonRpcResponse) {
                    let parsedResponse;
                    try {
                        parsedResponse = JSON.parse(jsonRpcResponse);
                    } catch (err) {
                        return jsonRpcResponse;
                    };

                    // Check whether response is a response to `system_health`.
                    if (parsedResponse.id && this.currentHealthCheckId == parsedResponse.id) {
                        this.currentHealthCheckId = null;

                        // Check whether query was successful. It is possible for queries to fail for
                        // various reasons, such as the client being overloaded.
                        if (!parsedResponse.result) {
                            this.update();
                            return null;
                        }

                        this.healthCallback(parsedResponse.result);
                        this.isSyncing = parsedResponse.result.isSyncing;
                        this.update();
                        return null;
                    }

                    // Check whether response is a response to the subscription or unsubscription.
                    if (parsedResponse.id && this.currentSubunsubRequestId == parsedResponse.id) {
                        this.currentSubunsubRequestId = null;

                        // Check whether query was successful. It is possible for queries to fail for
                        // various reasons, such as the client being overloaded.
                        if (!parsedResponse.result) {
                            this.update();
                            return null;
                        }

                        if (this.currentSubscriptionId)
                            this.currentSubscriptionId = null;
                        else
                            this.currentSubscriptionId = parsedResponse.result;

                        this.update();
                        return null;
                    }

                    // Check whether response is a notification to a subscription.
                    if (parsedResponse.params && this.currentSubscriptionId &&
                        parsedResponse.params.subscription == this.currentSubscriptionId) {
                        // Note that after a successful subscription, a notification containing
                        // the current best block is always returned. Considering that a
                        // subscription is performed in response to a health check, calling
                        // `startHealthCheck()` here will lead to a second health check.
                        // It might seem redundant to perform two health checks in a quick
                        // succession, but doing so doesn't lead to any problem, and it is
                        // actually possible for the health to have changed in between as the
                        // current best block might have been updated during the subscription
                        // request.
                        this.startHealthCheck();
                        this.update();
                        return null;
                    }

                    // Response doesn't concern us.
                    if (parsedResponse.id) {
                        // Need to remove the `extern:` prefix.
                        if (!parsedResponse.id.startsWith('extern:'))
                            throw new Error('State inconsistency in health checker');
                        const newId = JSON.parse(parsedResponse.id.slice('extern:'.length));
                        parsedResponse.id = newId;
                    }

                    return JSON.stringify(parsedResponse);
                },

                update: function () {
                    if (!this.currentHealthTimeout) {
                        this.currentHealthTimeout = setTimeout(() => {
                            this.currentHealthTimeout = null;
                            this.startHealthCheck();
                        }, 10000);
                    }

                    if (this.isSyncing && !this.currentSubscriptionId && !this.currentSubunsubRequestId)
                        this.startSubscription();
                    if (!this.isSyncing && this.currentSubscriptionId && !this.currentSubunsubRequestId)
                        this.endSubscription();
                },

                startHealthCheck: function () {
                    if (this.currentHealthCheckId)
                        throw new Error('Internal error in health checker');
                    if (this.currentHealthTimeout) {
                        clearTimeout(this.currentHealthTimeout);
                        this.currentHealthTimeout = null;
                    }
                    this.currentHealthCheckId = "health-checker:" + this.nextRequestId;
                    this.nextRequestId += 1;
                    sendJsonRpc(JSON.stringify({
                        jsonrpc: "2.0",
                        id: this.currentHealthCheckId,
                        method: 'system_health',
                        params: [],
                    }));
                },

                startSubscription: function () {
                    if (this.currentSubunsubRequestId || this.currentSubscriptionId)
                        throw new Error('Internal error in health checker');
                    this.currentSubunsubRequestId = "health-checker:" + this.nextRequestId;
                    this.nextRequestId += 1;
                    sendJsonRpc(JSON.stringify({
                        jsonrpc: "2.0",
                        id: this.currentSubunsubRequestId,
                        method: 'chain_subscribeNewHeads',
                        params: [],
                    }));
                },

                endSubscription: function () {
                    if (this.currentSubunsubRequestId || !this.currentSubscriptionId)
                        throw new Error('Internal error in health checker');
                    this.currentSubunsubRequestId = "health-checker:" + this.nextRequestId;
                    this.nextRequestId += 1;
                    sendJsonRpc(JSON.stringify({
                        jsonrpc: "2.0",
                        id: this.currentSubunsubRequestId,
                        method: 'chain_unsubscribeNewHeads',
                        params: [this.currentSubscriptionId],
                    }));
                },

                destroy: function () {
                    if (this.currentHealthTimeout) {
                        clearTimeout(this.currentHealthTimeout);
                        this.currentHealthTimeout = null;
                    }
                }
            };

            checker.startHealthCheck();
        },
        stop: () => {
            if (checker === null)
                return; // Already stopped.
            checker.destroy();
            checker = null;
        },
        sendJsonRpc: (request) => {
            if (!sendJsonRpc)
                throw new Error("setSendJsonRpc must be called before sending requests");
            if (checker === null)
                sendJsonRpc(request);
            else
                checker.sendJsonRpc(request);
        },
        responsePassThrough: (jsonRpcResponse) => {
            if (checker === null)
                return jsonRpcResponse;
            return checker.responsePassThrough(jsonRpcResponse);
        },
    };
}


/***/ }),

/***/ "../../node_modules/@substrate/smoldot-light/src/index.js":
/*!****************************************************************!*\
  !*** ../../node_modules/@substrate/smoldot-light/src/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "healthChecker": function() { return /* reexport safe */ _health_js__WEBPACK_IMPORTED_MODULE_1__.healthChecker; },
/* harmony export */   "AlreadyDestroyedError": function() { return /* binding */ AlreadyDestroyedError; },
/* harmony export */   "AddChainError": function() { return /* binding */ AddChainError; },
/* harmony export */   "JsonRpcDisabledError": function() { return /* binding */ JsonRpcDisabledError; },
/* harmony export */   "CrashError": function() { return /* binding */ CrashError; },
/* harmony export */   "start": function() { return /* binding */ start; }
/* harmony export */ });
/* harmony import */ var _compat_nodejs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compat-nodejs.js */ "../../node_modules/@substrate/smoldot-light/src/compat-browser.js");
/* harmony import */ var _health_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./health.js */ "../../node_modules/@substrate/smoldot-light/src/health.js");
// Smoldot
// Copyright (C) 2019-2021  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.




class AlreadyDestroyedError extends Error {
}

class AddChainError extends Error {
  constructor(message) {
    super(message);
  }
}

class JsonRpcDisabledError extends Error {
}

class CrashError extends Error {
  constructor(message) {
    super(message);
  }
}

function start(config) {
  config = config || {};

  const logCallback = config.logCallback || ((level, target, message) => {
    if (level <= 1) {
      console.error("[" + target + "]", message);
    } else if (level == 2) {
      console.warn("[" + target + "]", message);
    } else if (level == 3) {
      console.info("[" + target + "]", message);
    } else if (level == 4) {
      console.debug("[" + target + "]", message);
    } else {
      console.trace("[" + target + "]", message);
    }
  });

  // The actual execution of Smoldot is performed in a worker thread.
  //
  // The line of code below (`new Worker(...)`) is designed to hopefully work across all
  // platforms and bundlers. See the README.md for more context.
  const worker = new _compat_nodejs_js__WEBPACK_IMPORTED_MODULE_0__.Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("vendors-node_modules_substrate_smoldot-light_src_worker_js"), __webpack_require__.b));
  let workerError = null;

  // Whenever an `addChain` or `removeChain` message is sent to the worker, a corresponding entry
  // is pushed to this array. The worker needs to send back a confirmation, which pops the first
  // element of this array. In the case of `addChain`, additional fields are stored in this array
  // to finish the initialization of the chain.
  let pendingConfirmations = [];

  // For each chain that is currently running, contains the callback to use to send back JSON-RPC
  // responses corresponding to this chain.
  // Entries are instantly removed when the user desires to remove a chain even before the worker
  // has confirmed the removal. Doing so avoids a race condition where the worker sends back a
  // JSON-RPC response even though we've already sent a `removeChain` message to it.
  let chainsJsonRpcCallbacks = new Map();

  // The worker periodically sends a message of kind 'livenessPing' in order to notify that it is
  // still alive.
  // If this liveness ping isn't received for a long time, an error is reported in the logs.
  // The first check is delayed in order to account for the fact that the worker has to perform
  // an expensive initialization step when initializing the Wasm VM.
  let livenessTimeout = null;
  const resetLivenessTimeout = () => {
    if (livenessTimeout !== null)
      clearTimeout(livenessTimeout);
    livenessTimeout = setTimeout(() => {
      livenessTimeout = null;
      console.warn(
        "Smoldot appears unresponsive. Please open an issue at " +
        "https://github.com/paritytech/smoldot/issues. If you have a debugger available, " +
        "please pause execution, generate a stack trace of the thread that isn't the main " +
        "execution thread, and paste it in the issue. Please also include any other log found " +
        "in the console or elsewhere."
      );
    }, 10000);
  };
  setTimeout(() => resetLivenessTimeout(), 15000);

  // The worker can send us messages whose type is identified through a `kind` field.
  (0,_compat_nodejs_js__WEBPACK_IMPORTED_MODULE_0__.workerOnMessage)(worker, (message) => {
    if (message.kind == 'jsonrpc') {
      const cb = chainsJsonRpcCallbacks.get(message.chainId);
      if (cb) cb(message.data);

    } else if (message.kind == 'chainAddedOk') {
      const expected = pendingConfirmations.shift();
      let chainId = message.chainId; // Later set to null when the chain is removed.

      if (chainsJsonRpcCallbacks.has(chainId)) // Sanity check.
        throw 'Unexpected reuse of a chain ID';
      chainsJsonRpcCallbacks.set(chainId, expected.jsonRpcCallback);

      // `expected` was pushed by the `addChain` method.
      // Resolve the promise that `addChain` returned to the user.
      expected.resolve({
        sendJsonRpc: (request) => {
          if (workerError)
            throw workerError;
          if (chainId === null)
            throw new AlreadyDestroyedError();
          if (!chainsJsonRpcCallbacks.has(chainId))
            throw new JsonRpcDisabledError();
          worker.postMessage({ ty: 'request', request, chainId });
        },
        remove: () => {
          if (workerError)
            throw workerError;
          if (chainId === null)
            throw new AlreadyDestroyedError();
          pendingConfirmations.push({ ty: 'chainRemoved', chainId });
          worker.postMessage({ ty: 'removeChain', chainId });
          // Because the `removeChain` message is asynchronous, it is possible for a JSON-RPC
          // response concerning that `chainId` to arrive after the `remove` function has
          // returned. We solve that by removing the callback immediately.
          chainsJsonRpcCallbacks.delete(chainId);
          chainId = null;
        },
        // Hacky internal method that later lets us access the `chainId` of this chain for
        // implementation reasons.
        __internal_smoldot_id: () => chainId,
      });

    } else if (message.kind == 'chainAddedErr') {
      const expected = pendingConfirmations.shift();
      // `expected` was pushed by the `addChain` method.
      // Reject the promise that `addChain` returned to the user.
      expected.reject(new AddChainError(message.error));

    } else if (message.kind == 'chainRemoved') {
      pendingConfirmations.shift();

    } else if (message.kind == 'log') {
      logCallback(message.level, message.target, message.message);

    } else if (message.kind == 'livenessPing') {
      resetLivenessTimeout();

    } else {
      console.error('Unknown message type', message);
    }
  });

  (0,_compat_nodejs_js__WEBPACK_IMPORTED_MODULE_0__.workerOnError)(worker, (error) => {
    // A worker error should only happen in case of a critical error as the result of a bug
    // somewhere. Consequently, nothing is really in place to cleanly report the error.
    console.error(
      "Smoldot has panicked. This is a bug in smoldot. Please open an issue at " +
      "https://github.com/paritytech/smoldot/issues with the following message:"
    );
    console.error(error);
    workerError = new CrashError(error.toString());

    // Reject all promises returned by `addChain`.
    for (var pending of pendingConfirmations) {
      if (pending.ty == 'chainAdded')
        pending.reject(workerError);
    }
    pendingConfirmations = [];
  });

  // The first message expected by the worker contains the configuration.
  worker.postMessage({
    // Maximum level of log entries sent by the client.
    // 0 = Logging disabled, 1 = Error, 2 = Warn, 3 = Info, 4 = Debug, 5 = Trace
    maxLogLevel: config.maxLogLevel || 3,
    forbidTcp: config.forbidTcp,
    forbidWs: config.forbidWs,
    forbidWss: config.forbidWss,
  });

  return {
    addChain: (options) => {
      if (workerError)
        throw workerError;

      let potentialRelayChainsIds = [];
      if (!!options.potentialRelayChains) {
        for (const chain of options.potentialRelayChains) {
          // The content of `options.potentialRelayChains` are supposed to be chains earlier
          // returned by `addChain`. The hacky `__internal_smoldot_id` method lets us obtain the
          // internal ID of these chains.
          const id = chain.__internal_smoldot_id();
          if (id === null) // It is possible for `id` to be null if it has earlier been removed.
            continue;
          potentialRelayChainsIds.push(id);
        }
      }

      // Build a promise that will be resolved or rejected after the chain has been added.
      let chainAddedPromiseResolve;
      let chainAddedPromiseReject;
      const chainAddedPromise = new Promise((resolve, reject) => {
        chainAddedPromiseResolve = resolve;
        chainAddedPromiseReject = reject;
      });

      pendingConfirmations.push({
        ty: 'chainAdded',
        reject: chainAddedPromiseReject,
        resolve: chainAddedPromiseResolve,
        jsonRpcCallback: options.jsonRpcCallback,
      });

      worker.postMessage({
        ty: 'addChain',
        chainSpec: options.chainSpec,
        potentialRelayChains: potentialRelayChainsIds,
        jsonRpcRunning: !!options.jsonRpcCallback,
      });

      return chainAddedPromise;
    },
    terminate: () => {
      worker.terminate();
      if (!workerError)
        workerError = new AlreadyDestroyedError();
    }
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,